{
	"info": {
		"_postman_id": "7df59393-5608-4ff6-a5fa-c7407de17d74",
		"name": "Todos",
		"description": "Test todo lifecycle from insertion to deletion. ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response is an array with 500 elements\", () => {",
							"",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.be.equal(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{todos}}",
					"host": [
						"{{host}}{{todos}}"
					]
				},
				"description": "Obtain all existing todos."
			},
			"response": []
		},
		{
			"name": "Get one todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains todo with id 500\", () => {",
							"",
							"    pm.expect(responseJson.title).to.be.equal(\"ipsam aperiam voluptates qui\");",
							"    pm.expect(responseJson.completed).to.be.equal(false);",
							"    pm.expect(responseJson.userId).to.be.equal(10);",
							"    pm.expect(responseJson.id).to.be.equal(200);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{todos}}/200",
					"host": [
						"{{host}}{{todos}}"
					],
					"path": [
						"200"
					]
				},
				"description": "Obtain a todo."
			},
			"response": []
		},
		{
			"name": "Get one todo (Parameterized)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains only a todo (with id 200)\", () => {",
							"",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.equal(1);",
							"    ",
							"    pm.expect(responseJson[0].title).to.be.equal(\"ipsam aperiam voluptates qui\");",
							"    pm.expect(responseJson[0].completed).to.be.equal(false);",
							"    pm.expect(responseJson[0].userId).to.be.equal(10);",
							"    pm.expect(responseJson[0].id).to.be.equal(200);",
							"",
							"});",
							"",
							"const i = Number(pm.variables.get(\"i\")) + 1;",
							"const queryParams = pm.variables.get(\"queryParameters\");",
							"const length = queryParams.length;",
							"",
							"if(i < length) {",
							"    pm.variables.set(\"i\", i);",
							"    postman.setNextRequest(\"Get one todo (Parameterized)\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var i = 0;",
							"",
							"if(pm.variables.has(\"i\")) {",
							"    i = Number(pm.variables.get(\"i\"))",
							"} else {",
							"    pm.variables.set(\"i\", i);   ",
							"}",
							"",
							"const queryParams = [   \"id=200\", ",
							"                        \"title=ipsam%20aperiam%20voluptates%20qui\", ",
							"                        \"title=ipsam%20aperiam%20voluptates%20qui&completed=false\", ",
							"                        \"userId=10&id=200\",",
							"                        \"userId=10&id=200&title=ipsam%20aperiam%20voluptates%20qui\",",
							"                        \"postId=10&id=200&title=ipsam%20aperiam%20voluptates%20qui&completed=false\"",
							"                    ];",
							"",
							"pm.variables.set(\"queryParameters\", queryParams);",
							"",
							"const lenght = queryParams.length",
							"",
							"if(i < lenght) { ",
							"    pm.variables.set(\"queryParameter\", queryParams[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{todos}}?{{queryParameter}}",
					"host": [
						"{{host}}{{todos}}"
					],
					"query": [
						{
							"key": "{{queryParameter}}",
							"value": null
						}
					]
				},
				"description": "Obtain a todo filtering by combinations of its userId, its title, its completed status."
			},
			"response": []
		},
		{
			"name": "Insert one todo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"userId\", _.random(1, 1000));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", pm.response.to.have.status(201));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains new todo\", () => {",
							"",
							"    pm.expect(responseJson.title).to.be.equal(\"Test Title\");",
							"    pm.expect(responseJson.completed).to.be.equal(true);",
							"    pm.expect(responseJson.userId).to.be.equal(pm.variables.get(\"userId\"));",
							"    pm.expect(responseJson.id).to.be.equal(201);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"title\": \"Test Title\",\n    \"completed\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}{{todos}}",
					"host": [
						"{{host}}{{todos}}"
					]
				},
				"description": "Inserts a comment."
			},
			"response": []
		},
		{
			"name": "Edit one todo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"userId\", _.random(1, 1000));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains updated todo\", () => {",
							"",
							"    pm.expect(responseJson.title).to.be.equal(\"Test Title\");",
							"    pm.expect(responseJson.completed).to.be.equal(true);",
							"    pm.expect(responseJson.userId).to.be.equal(pm.variables.get(\"userId\"));",
							"    pm.expect(responseJson.id).to.be.equal(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"title\": \"Test Title\",\n    \"completed\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}{{todos}}/200",
					"host": [
						"{{host}}{{todos}}"
					],
					"path": [
						"200"
					]
				},
				"description": "Replaces a comment."
			},
			"response": []
		},
		{
			"name": "Inline edit one todo (Parameterized)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var i = 0;",
							"",
							"if(pm.variables.has(\"i\")) {",
							"    i = Number(pm.variables.get(\"i\"))",
							"} else {",
							"    pm.variables.set(\"i\", i);   ",
							"}",
							"",
							"const keys = [   \"userId\", ",
							"                 \"title\", ",
							"                 \"completed\"",
							"             ];",
							"",
							"pm.variables.set(\"keys\", keys);",
							"",
							"const lenght = keys.length",
							"",
							"if(i < lenght) { ",
							"    pm.variables.set(\"key\", keys[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"var key = pm.variables.get(\"key\");",
							"",
							"pm.test(\"The response contains updated todo\", () => {",
							"    ",
							"    pm.expect(responseJson.id).to.be.equal(200);",
							"",
							"    if(key===\"userId\") {",
							"        pm.expect(responseJson.title).to.be.equal(\"ipsam aperiam voluptates qui\");",
							"        pm.expect(responseJson.completed).to.be.equal(false);",
							"        pm.expect(responseJson.userId).to.be.equal(\"Test\");",
							"    }",
							"",
							"    if(key===\"title\") {",
							"        pm.expect(responseJson.title).to.be.equal(\"Test\");",
							"        pm.expect(responseJson.completed).to.be.equal(false);",
							"        pm.expect(responseJson.userId).to.be.equal(10);",
							"    }",
							"",
							"    if(key===\"completed\") {",
							"        pm.expect(responseJson.title).to.be.equal(\"ipsam aperiam voluptates qui\");",
							"        pm.expect(responseJson.completed).to.be.equal(\"Test\");",
							"        pm.expect(responseJson.userId).to.be.equal(10);",
							"    }",
							"    ",
							"});",
							"",
							"const i = Number(pm.variables.get(\"i\")) + 1;",
							"const keys = pm.variables.get(\"keys\");",
							"const length = keys.length;",
							"",
							"if(i < length) {",
							"    pm.variables.set(\"i\", i);",
							"    postman.setNextRequest(\"Inline edit one todo (Parameterized)\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"{{key}}\": \"Test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}{{todos}}/200",
					"host": [
						"{{host}}{{todos}}"
					],
					"path": [
						"200"
					]
				},
				"description": "Edits a todo userId, title and completed status."
			},
			"response": []
		},
		{
			"name": "Delete one todo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}{{todos}}/200",
					"host": [
						"{{host}}{{todos}}"
					],
					"path": [
						"200"
					]
				},
				"description": "Deletes a todo."
			},
			"response": []
		},
		{
			"name": "Get one user todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response is an array with 20 todos\", () => {",
							"",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.be.equal(20);",
							"",
							"});",
							"",
							"pm.test(\"All todos are from this user\", () => {",
							"    _.each(responseJson, (post) => {",
							"",
							"        pm.expect(post.userId).to.be.equal(10)",
							"        ",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{users}}/10{{todos}}",
					"host": [
						"{{host}}{{users}}"
					],
					"path": [
						"10{{todos}}"
					]
				},
				"description": "Obtain todos from user."
			},
			"response": []
		},
		{
			"name": "Get one todo (404)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", pm.response.to.have.status(404));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{todos}}/201",
					"host": [
						"{{host}}{{todos}}"
					],
					"path": [
						"201"
					]
				},
				"description": "Try to obtain a todo."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}