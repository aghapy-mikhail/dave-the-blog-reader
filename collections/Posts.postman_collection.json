{
	"info": {
		"_postman_id": "9beb1249-7e36-4535-8dd1-67113b57970a",
		"name": "Posts",
		"description": "Test post lifecycle from insertion to deletion. ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response is an array with 100 elements\", () => {",
							"",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.be.equal(100);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{posts}}",
					"host": [
						"{{host}}{{posts}}"
					]
				},
				"description": "Obtain all existing posts."
			},
			"response": []
		},
		{
			"name": "Get one post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains post with id 100\", () => {",
							"",
							"    pm.expect(responseJson.title).to.be.equal(\"at nam consequatur ea labore ea harum\");",
							"    pm.expect(responseJson.body).to.be.equal(\"cupiditate quo est a modi nesciunt soluta\\nipsa voluptas error itaque dicta in\\nautem qui minus magnam et distinctio eum\\naccusamus ratione error aut\");",
							"    pm.expect(responseJson.userId).to.be.equal(10);",
							"    pm.expect(responseJson.id).to.be.equal(100);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{posts}}/100",
					"host": [
						"{{host}}{{posts}}"
					],
					"path": [
						"100"
					]
				},
				"description": "Obtain a post."
			},
			"response": []
		},
		{
			"name": "Get one post (Parameterized)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains only a post (with id 100)\", () => {",
							"",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.equal(1);",
							"    ",
							"    pm.expect(responseJson[0].title).to.be.equal(\"at nam consequatur ea labore ea harum\");",
							"    pm.expect(responseJson[0].body).to.be.equal(\"cupiditate quo est a modi nesciunt soluta\\nipsa voluptas error itaque dicta in\\nautem qui minus magnam et distinctio eum\\naccusamus ratione error aut\");",
							"    pm.expect(responseJson[0].userId).to.be.equal(10);",
							"    pm.expect(responseJson[0].id).to.be.equal(100);",
							"",
							"});",
							"",
							"const i = Number(pm.variables.get(\"i\")) + 1;",
							"const queryParams = pm.variables.get(\"queryParameters\");",
							"const length = queryParams.length;",
							"",
							"if(i < length) {",
							"    pm.variables.set(\"i\", i);",
							"    postman.setNextRequest(\"Get one post (Parameterized)\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var i = 0;",
							"",
							"if(pm.variables.has(\"i\")) {",
							"    i = Number(pm.variables.get(\"i\"))",
							"} else {",
							"    pm.variables.set(\"i\", i);   ",
							"}",
							"",
							"const queryParams = [   \"id=100\", ",
							"                        \"title=at%20nam%20consequatur%20ea%20labore%20ea%20harum\", ",
							"                        \"userId=10&id=100\",",
							"                        \"userId=10&title=at%20nam%20consequatur%20ea%20labore%20ea%20harum\",",
							"                        \"userId=10&id=100&title=at%20nam%20consequatur%20ea%20labore%20ea%20harum\"",
							"                    ];",
							"",
							"pm.variables.set(\"queryParameters\", queryParams);",
							"",
							"const lenght = queryParams.length",
							"",
							"if(i < lenght) { ",
							"    pm.variables.set(\"queryParameter\", queryParams[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{posts}}?{{queryParameter}}",
					"host": [
						"{{host}}{{posts}}"
					],
					"query": [
						{
							"key": "{{queryParameter}}",
							"value": null
						}
					]
				},
				"description": "Obtain a post filtering by combinations of its title, its id and its userId."
			},
			"response": []
		},
		{
			"name": "Insert one post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"userId\", _.random(1, 1000));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", pm.response.to.have.status(201));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains new post\", () => {",
							"",
							"    pm.expect(responseJson.title).to.be.equal(\"Test Title\");",
							"    pm.expect(responseJson.body).to.be.equal(\"This is a test.\");",
							"    pm.expect(responseJson.userId).to.be.equal(pm.variables.get(\"userId\"));",
							"    pm.expect(responseJson.id).to.be.equal(101);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Test Title\",\n    \"body\": \"This is a test.\",\n    \"userId\": {{userId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}{{posts}}",
					"host": [
						"{{host}}{{posts}}"
					]
				},
				"description": "Inserts a post."
			},
			"response": []
		},
		{
			"name": "Edit one post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"userId\", _.random(1, 1000));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response contains updated post\", () => {",
							"",
							"    pm.expect(responseJson.title).to.be.equal(\"Test Title\");",
							"    pm.expect(responseJson.body).to.be.equal(\"This is a test.\");",
							"    pm.expect(responseJson.userId).to.be.equal(pm.variables.get(\"userId\"));",
							"    pm.expect(responseJson.id).to.be.equal(100);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Test Title\",\n    \"body\": \"This is a test.\",\n    \"userId\": {{userId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}{{posts}}/100",
					"host": [
						"{{host}}{{posts}}"
					],
					"path": [
						"100"
					]
				},
				"description": "Replaces a post."
			},
			"response": []
		},
		{
			"name": "Inline edit one post (Parameterized)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var i = 0;",
							"",
							"if(pm.variables.has(\"i\")) {",
							"    i = Number(pm.variables.get(\"i\"))",
							"} else {",
							"    pm.variables.set(\"i\", i);   ",
							"}",
							"",
							"const keys = [   \"userId\", ",
							"                 \"title\", ",
							"                 \"body\"",
							"             ];",
							"",
							"pm.variables.set(\"keys\", keys);",
							"",
							"const lenght = keys.length",
							"",
							"if(i < lenght) { ",
							"    pm.variables.set(\"key\", keys[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"var key = pm.variables.get(\"key\");",
							"",
							"pm.test(\"The response contains updated post\", () => {",
							"    ",
							"    pm.expect(responseJson.id).to.be.equal(100);",
							"",
							"    if(key===\"userId\") {",
							"        pm.expect(responseJson.title).to.be.equal(\"at nam consequatur ea labore ea harum\");",
							"        pm.expect(responseJson.body).to.be.equal(\"cupiditate quo est a modi nesciunt soluta\\nipsa voluptas error itaque dicta in\\nautem qui minus magnam et distinctio eum\\naccusamus ratione error aut\");",
							"        pm.expect(responseJson.userId).to.be.equal(\"Test\");",
							"    }",
							"",
							"    if(key===\"title\") {",
							"        pm.expect(responseJson.title).to.be.equal(\"Test\");",
							"        pm.expect(responseJson.body).to.be.equal(\"cupiditate quo est a modi nesciunt soluta\\nipsa voluptas error itaque dicta in\\nautem qui minus magnam et distinctio eum\\naccusamus ratione error aut\");",
							"        pm.expect(responseJson.userId).to.be.equal(10);",
							"    }",
							"",
							"    if(key===\"body\") {",
							"        pm.expect(responseJson.title).to.be.equal(\"at nam consequatur ea labore ea harum\");",
							"        pm.expect(responseJson.body).to.be.equal(\"Test\");",
							"        pm.expect(responseJson.userId).to.be.equal(10);",
							"    }",
							"",
							"});",
							"",
							"const i = Number(pm.variables.get(\"i\")) + 1;",
							"const keys = pm.variables.get(\"keys\");",
							"const length = keys.length;",
							"",
							"if(i < length) {",
							"    pm.variables.set(\"i\", i);",
							"    postman.setNextRequest(\"Inline edit one post (Parameterized)\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"{{key}}\": \"Test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}{{posts}}/100",
					"host": [
						"{{host}}{{posts}}"
					],
					"path": [
						"100"
					]
				},
				"description": "Edits a post author, title and body."
			},
			"response": []
		},
		{
			"name": "Delete one post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}{{posts}}/100",
					"host": [
						"{{host}}{{posts}}"
					],
					"path": [
						"100"
					]
				},
				"description": "Deletes a post."
			},
			"response": []
		},
		{
			"name": "Get one user posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", pm.response.to.have.status(200));",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"The response is an array with 10 posts\", () => {",
							"",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.be.equal(10);",
							"",
							"});",
							"",
							"pm.test(\"All posts are from this user\", () => {",
							"    _.each(responseJson, (post) => {",
							"",
							"        pm.expect(post.userId).to.be.equal(10)",
							"        ",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{users}}/10{{posts}}",
					"host": [
						"{{host}}{{users}}"
					],
					"path": [
						"10{{posts}}"
					]
				},
				"description": "Obtain posts from user."
			},
			"response": []
		},
		{
			"name": "Get one post (404)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", pm.response.to.have.status(404));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{posts}}/101",
					"host": [
						"{{host}}{{posts}}"
					],
					"path": [
						"101"
					]
				},
				"description": "Try to obtain a post."
			},
			"response": []
		}
	]
}